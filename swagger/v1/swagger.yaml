openapi: '3.0.0'
info:
  title: Study Circle API
  version: 1.0.0
  description: This is the backend for Study Circle project
servers:
  - url: http://localhost:3000
    description: Development server
paths:
  /users:
    get:
      summary: Get all users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/AuthHeaderMissingError'

  /users/{id}:
    get:
      summary: Get a specific user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: A user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/AuthHeaderMissingError'

  /profile:
    get:
      summary: Get the user profile
      responses:
        '200':
          description: The user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/AuthHeaderMissingError'
    put:
      summary: Update the user information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John Doe"
                description:
                  type: string
                  example: "A brief description of the user."
      responses:
        '200':
          description: The updated user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User updated"
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "param is missing or the value is empty"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/AuthHeaderMissingError'

  /auth/google_oauth2/callback:
    get:
      summary: Callback for Google OAuth2
      responses:
        '200':
          description: Register/login the user and generate the JWT token 
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    format: JWT
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwMzQwZjQwZjQwZjQwZjQwZjQwZjQwZiIsImlhdCI6MTYxNjIwNjQwMn0.1
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

  /topics/{topic_id}/tutor_availability:
    post:
      summary: Create availability for a specific topic
      parameters:
        - in: path
          name: topic_id
          required: true
          schema:
            type: integer
          description: The ID of the topic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                availability_tutor:
                  type: object
                  properties:
                    description:
                      type: string
                    tentative_date_from:
                      type: string
                      format: date-time
                    tentative_date_to:
                      type: string
                      format: date-time
                    effective_date:
                      type: string
                      format: date-time
                    link:
                      type: string
                    form:
                      type: string
      responses:
        '201':
          description: Availability created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Availability created successfully
                  availability:
                    type: object
                    properties:
                      id:
                        type: integer
                      description:
                        type: string
                      tentative_date_from:
                        type: string
                        format: date-time
                      tentative_date_to:
                        type: string
                        format: date-time
                      effective_date:
                        type: string
                        format: date-time
                      link:
                        type: string
                      form:
                        type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: param is missing or the value is empty availability_tutor

  /tutor_availability:
    post:
      summary: Create a new topic and availability at the same time
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                topic:
                  type: object
                  properties:
                    name:
                      type: string
                    asset:
                      type: string
                    subject_id:
                      type: integer
                availability_tutor:
                  type: object
                  properties:
                    description:
                      type: string
                    tentative_date_from:
                      type: string
                      format: date-time
                    tentative_date_to:
                      type: string
                      format: date-time
                    effective_date:
                      type: string
                      format: date-time
                    link:
                      type: string
                    form:
                      type: string
      responses:
        '201':
          description: Topic and availability created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Topic and availability created successfully
                  availability:
                    type: object
                    properties:
                      id:
                        type: integer
                      description:
                        type: string
                      tentative_date_from:
                        type: string
                        format: date-time
                      tentative_date_to:
                        type: string
                        format: date-time
                      effective_date:
                        type: string
                        format: date-time
                      link:
                        type: string
                      form:
                        type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: param is missing or the value is empty

    get:
      summary: Get all availabilities
      responses:
        '200':
          description: A list of all availabilities
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    description:
                      type: string
                    tentative_date_from:
                      type: string
                      format: date-time
                    tentative_date_to:
                      type: string
                      format: date-time
                    effective_date:
                      type: string
                      format: date-time
                    link:
                      type: string
                    form:
                      type: string

  /tutor_availability/{id}:
    get:
      summary: Get availability by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the availability
      responses:
        '200':
          description: Availability details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  description:
                    type: string
                  tentative_date_from:
                    type: string
                    format: date-time
                  tentative_date_to:
                    type: string
                    format: date-time
                  effective_date:
                    type: string
                    format: date-time
                  link:
                    type: string
                  form:
                    type: string
        '404':
          description: Availability not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Availability not found
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Bad request
  paths:
  /universities/{university_id}/subjects/{subject_id}/topics:
    post:
      summary: Create a new topic for a specific subject
      parameters:
        - in: path
          name: university_id
          required: true
          schema:
            type: integer
          description: The ID of the university
        - in: path
          name: subject_id
          required: true
          schema:
            type: integer
          description: The ID of the subject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "80868"
                asset:
                  type: string
                  example: "Buenardo"
      responses:
        '201':
          description: Topic created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  asset:
                    type: string
                  created_at:
                    type: string
                    format: date-time
                  updated_at:
                    type: string
                    format: date-time
                  subject_id:
                    type: integer
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Bad request

    get:
      summary: Get all topics for a specific subject
      parameters:
        - in: path
          name: university_id
          required: true
          schema:
            type: integer
          description: The ID of the university
        - in: path
          name: subject_id
          required: true
          schema:
            type: integer
          description: The ID of the subject
      responses:
        '200':
          description: A list of topics
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    asset:
                      type: string
                    created_at:
                      type: string
                      format: date-time
                    updated_at:
                      type: string
                      format: date-time
                    subject_id:
                      type: integer
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Bad request

  /universities/{university_id}/subjects/{subject_id}/topics/{id}:
    get:
      summary: Get a specific topic by ID
      parameters:
        - in: path
          name: university_id
          required: true
          schema:
            type: integer
          description: The ID of the university
        - in: path
          name: subject_id
          required: true
          schema:
            type: integer
          description: The ID of the subject
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the topic
      responses:
        '200':
          description: A topic object
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  asset:
                    type: string
                  created_at:
                    type: string
                    format: date-time
                  updated_at:
                    type: string
                    format: date-time
                  subject_id:
                    type: integer
        '404':
          description: Topic not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Topic not found
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Bad request

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT  # Indicates that this is a JWT token
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        description:
          type: string
        image_url:
          type: string
          format: uri
  responses:
    UnauthorizedError:
      description: Unauthorized error by invalid token
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Invalid token
    AuthHeaderMissingError:
      description: Bad request error by missing Authorization header
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Authorization header is missing