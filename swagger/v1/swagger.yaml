openapi: '3.0.0'
info:
  title: Study Circle API
  version: 1.0.0
  description: This is the backend for the Study Circle project
servers:
  - url: http://localhost:3000
    description: Development server
paths:
  /users:
    get:
      summary: Get all users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/AuthHeaderMissingError'
      tags:
      - Users

  /users/{id}:
    get:
      summary: Get a specific user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: A user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/AuthHeaderMissingError'
      tags:
      - Users


  /profile:
    get:
      summary: Get the user profile
      responses:
        '200':
          description: The user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/AuthHeaderMissingError'
      tags:
      - Users

    put:
      summary: Update the user information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John Doe"
                description:
                  type: string
                  example: "A brief description of the user."
      responses:
        '200':
          description: The updated user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User updated"
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "param is missing or the value is empty"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/AuthHeaderMissingError'
      tags:
      - Users


  /auth/google_oauth2/callback:
    get:
      summary: Callback for Google OAuth2
      responses:
        '200':
          description: Register/login the user and generate the JWT token 
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    format: JWT
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwMzQwZjQwZjQwZjQwZjQwZjQwZiIsImlhdCI6MTYxNjIwNjQwMn0.1
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error
      tags:
      - Authentication


  /topics/{topic_id}/tutor_availability:
    post:
      summary: Create an availability tutor for an existing topic
      description: |
        This endpoint allows the creation of an availability tutor for an existing topic by providing the `topic_id`. You do not need to provide the `topic` structure in the request.
      parameters:
      - in: path
        name: topic_id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAvailabilityTutorInputWithoutTopic'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailabilityTutor'
          description: Availability tutor created for the existing topic.
        '422':
          description: Validation errors
      tags:
      - Tutor availability

  /tutor_availability:
    post:
      summary: Create a new availability tutor (with optional topic creation)
      description: |
        This endpoint allows the creation of an availability tutor. If the `topic` field is provided, a new topic will be created alongside the availability tutor.
        If no `topic` is provided, use the `/topics/{topic_id}/tutor_availability` endpoint to create an availability for an existing topic.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAvailabilityTutorInputWithTopic'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  availability_tutor:
                    $ref: '#/components/schemas/AvailabilityTutor'
                  topic:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      asset:
                        type: string
          description: Availability tutor created, possibly with a new topic.
        '422':
          description: Validation errors
      tags:
      - Tutor availability
    get:
      summary: Get all availabilities
      responses:
        '200':
          description: A list of all availabilities
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    description:
                      type: string
                    date_from:
                      type: string
                      format: date-time
                    date_to:
                      type: string
                      format: date-time
                    link:
                      type: string
      tags:
      - Tutor availability

  /tutor_availability/{id}:
    get:
      summary: Get availability by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the availability
      responses:
        '200':
          description: Availability details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  description:
                    type: string
                  date_from:
                    type: string
                    format: date-time
                  date_to:
                    type: string
                    format: date-time
                  link:
                    type: string
        '404':
          description: Availability not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Availability not found
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Bad request
      tags:
      - Tutor availability
                    
  /tutor_availability/{availability_tutor_id}/meets:
    get:
      parameters:
      - in: path
        name: availability_tutor_id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Meet'
                type: array
          description: A list of meetings
        '404':
          description: Availability tutor not found
      summary: List all meetings for a specific availability tutor
      tags:
      - Meets
  /meets/{id}:
    get:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meet'
          description: Meeting details
        '404':
          description: Meeting not found
      summary: Get details of a specific meeting
      tags:
      - Meets
  /tutor_availability/{id}/interesteds:
    post:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meet'
          description: >
            Interest added successfully. A new meeting is created only if one does not already exist for this availability tutor.
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          description: >
            Interest added, but a meeting already exists for this availability tutor.
        '422':
          description: Interest already exists or validation errors
      summary: Add interest to an availability tutor
      tags:
      - Interesteds

  /universities/{university_id}/subjects/{subject_id}/topics:
    post:
      summary: Create a new topic for a specific subject
      tags:
      - Universities
      parameters:
        - in: path
          name: university_id
          required: true
          schema:
            type: integer
          description: The ID of the university
        - in: path
          name: subject_id
          required: true
          schema:
            type: integer
          description: The ID of the subject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "80868"
                asset:
                  type: string
                  example: "Buenardo"
      responses:
        '201':
          description: Topic created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  asset:
                    type: string
                  created_at:
                    type: string
                    format: date-time
                  updated_at:
                    type: string
                    format: date-time
                  subject_id:
                    type: integer

    get:
      summary: Get all topics for a specific subject
      tags:
      - Universities
      parameters:
        - in: path
          name: university_id
          required: true
          schema:
            type: integer
          description: The ID of the university
        - in: path
          name: subject_id
          required: true
          schema:
            type: integer
          description: The ID of the subject
      responses:
        '200':
          description: A list of topics
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    asset:
                      type: string
                    created_at:
                      type: string
                      format: date-time
                    updated_at:
                      type: string
                      format: date-time
                    subject_id:
                      type: integer
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Bad request

  /universities/{university_id}/subjects/{subject_id}/topics/{id}:
    get:
      summary: Get a specific topic by ID
      tags:
      - Universities
      parameters:
        - in: path
          name: university_id
          required: true
          schema:
            type: integer
          description: The ID of the university
        - in: path
          name: subject_id
          required: true
          schema:
            type: integer
          description: The ID of the subject
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the topic
      responses:
        '200':
          description: A topic object
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  asset:
                    type: string
                  created_at:
                    type: string
                    format: date-time
                  updated_at:
                    type: string
                    format: date-time
                  subject_id:
                    type: integer
        '404':
          description: Topic not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Topic not found
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Bad request

  /students/topics/{topic_id}/request_topic:
    post:
      summary: A Student request a Topic
      tags:
      - Students
      description: A student can request a topic, if the topic is not registered in the database, it will be created (use -1 as topic_id in this case and post a json with the topic name, asset, and subject_id)
      parameters:
        - in: path
          name: topic_id
          required: true
          schema:
            type: integer
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                topic:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "topic name"
                    asset:
                      type: string
                      example: "asset"
                    subject_id:
                      type: integer
                      example: 10
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Student successfully added to topic"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/AuthHeaderMissingError'
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to add student to topic"

  /students/my_requested_topics:
    get:
      summary: Get all the topics requested by the user
      tags:
      - Students
      responses:
        '200':
          description: A list of topics requested by the user
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    subject_id:
                      type: integer
                      example: 12
                    subject_name:
                      type: string
                      example: "GAL 2"
                    topic_id:
                      type: integer
                      example: 7
                    topic_name:
                      type: string
                      example: "Valores Propios"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/AuthHeaderMissingError'

  /students/requested_topics:
    get:
      summary: Get all the requested topics
      tags:
      - Students
      responses:
        '200':
          description: A list of topics requested by all users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    subject_id:
                      type: integer
                      example: 12
                    subject_name:
                      type: string
                      example: "GAL 2"
                    topic_id:
                      type: integer
                      example: 7
                    topic_name:
                      type: string
                      example: "Valores Propios"
                    user_count:
                      type: integer
                      example: 3
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/AuthHeaderMissingError'

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT  # Indicates that this is a JWT token

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        description:
          type: string
        image_url:
          type: string
          format: uri

    AvailabilityTutor:
      type: object
      properties:
        id:
          type: integer
        date_from:
          type: string
          format: date-time
        date_to:
          type: string
          format: date-time
        description:
          type: string
        link:
          type: string
        tentatives:
          type: array
          items:
            type: object
            properties:
              day:
                type: string
              schedule_from:
                type: string
                format: date-time
              schedule_to:
                type: string
                format: date-time

    CreateAvailabilityTutorInputWithTopic:
      type: object
      required:
        - description
        - date_from
        - date_to
        - link
      properties:
        topic:
          type: object
          properties:
            name:
              type: string
            asset:
              type: string
        date_from:
          type: string
          format: date-time
        date_to:
          type: string
          format: date-time
        description:
          type: string
        link:
          type: string
        tentatives:
          type: array
          items:
            type: object
            properties:
              day:
                type: string
              schedule_from:
                type: string
                format: date-time
              schedule_to:
                type: string
                format: date-time

    CreateAvailabilityTutorInputWithoutTopic:
      type: object
      required:
        - description
        - date_from
        - date_to
        - link
      properties:
        date_from:
          type: string
          format: date-time
        date_to:
          type: string
          format: date-time
        description:
          type: string
        link:
          type: string
        tentatives:
          type: array
          items:
            type: object
            properties:
              day:
                type: string
              schedule_from:
                type: string
                format: date-time
              schedule_to:
                type: string
                format: date-time

    Meet:
      type: object
      properties:
        id:
          type: integer
        date_time:
          type: string
          format: date-time
        description:
          type: string
        link:
          type: string
        mode:
          type: string
        status:
          type: string
          enum:
            - pending
            - confirmed

  responses:
    UnauthorizedError:
      description: Unauthorized error by invalid token
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Invalid token

    AuthHeaderMissingError:
      description: Bad request error by missing Authorization header
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Authorization header is missing