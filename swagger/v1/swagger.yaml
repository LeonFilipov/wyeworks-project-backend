openapi: '3.0.0'
info:
  title: Study Circle API
  version: 1.0.0
  description: This is the backend for the Study Circle project
servers:
  - url: http://localhost:3000
    description: Development server
paths:
  /users:
    get:
      summary: Get all users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/AuthHeaderMissingError'
      tags:
      - Users

  /users/{id}:
    get:
      summary: Get a specific user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: A user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/AuthHeaderMissingError'
      tags:
      - Users
  /proposed_topics:
    get:
      summary: Get proposed topics for the current user
      tags:
        - Users
      description: Retrieve a list of topics proposed by the logged user with his availability.
      responses:
        '200':
          description: A list of proposed topics
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: ID of the proposed topic
                    name:
                      type: string
                      description: Name of the proposed topic
        '422':
          description: Unprocessable entity. This error can return an array of errors. For example, if three parameters are required and none of them are provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Required param can't be blank"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/AuthHeaderMissingError'

  /proposed_topics/{topic_id}:
    get:
      summary: Get detailed information of a proposed topic by the logged user
      tags:
        - Users
      description: Retrieve detailed information about a specific topic proposed by the logged user.
      parameters:
        - in: path
          name: topic_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Detailed information about a proposed topic
          content:
            application/json:
              schema:
                type: object
                properties:
                  availability_id:
                    type: integer
                    description: ID of the availability
                  topic_name:
                    type: string
                    description: Name of the topic
                  topic_image:
                    type: string
                    nullable: true
                    description: Image URL of the topic
                  topic_description:
                    type: string
                    description: Description of the topic
                  availability:
                    type: string
                    description: Time availability for tutoring
                  availability_description:
                    type: string
                    description: Description of the tutor's availability
                  interesteds:
                    type: integer
                    description: Number of interested students
                  subject:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: ID of the subject
                      name:
                        type: string
                        description: Name of the subject
                  tutor:
                    type: object
                    properties:
                      id:
                        type: string
                        description: ID of the tutor
                      name:
                        type: string
                        description: Name of the tutor
                      image_url:
                        type: string
                        description: Image URL of the tutor
        '422':
          description: Unprocessable entity. This error can return an array of errors. For example, if three parameters are required and none of them are provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: "Required param can't be blank"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/AuthHeaderMissingError'
          
  /tutor_availability/{id}/interesteds:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: The ID of the tutor availability
    post:
      deprecated: true
      tags:
        - Tutor availability
      responses:
        '200':
          description: Success
        '404':
          description: Not found

  
  /interested_meetings:
    get:
      deprecated: true
      summary: Gets meeting that im interested.
      description: |
        This endpoint allows a user as a studento to show interest in a tutor's availability. If there is a pending meet, the user's interest is added, and the count of interested users is incremented. If no pending meet exists, a new meet is created.
      responses:
        '200':
          description: Interest added and meet updated
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    topic_name:
                      type: string
                      example: "topic 1111111111111"
                    tutor_name:
                      type: string
                      example: "Tutor name"
                    meet_status:
                      type: string
                      example: "confirmed"
                    date_time:
                      oneOf:
                        - type: string
                          format: date-time
                          example: "2024-11-11T22:13:39.937+00:00"
                        - type: string
                          example: "Indefinida"
      tags:
        - Meets

  /profile:
    get:
      summary: Get the user profile
      responses:
        '200':
          description: The user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/AuthHeaderMissingError'
      tags:
      - Users
    put:
      summary: Update the user information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John Doe"
                description:
                  type: string
                  example: "A brief description of the user."
                career_id:
                  type: integer
                  example: 1
      responses:
        '200':
          description: The updated user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User updated successfully"
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "param is missing or the value is empty"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/AuthHeaderMissingError'
        '404':
          description: Career not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Career not found"
      tags:
      - Users

  /profile/meets:
    get:
      deprecated: true
      summary: Get the tutors's meetings
      responses:
        '200':
          description: A list of meetings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TutorMeet'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/AuthHeaderMissingError'
      tags:
      - Users
  /profile/teach:
    get:
      summary: "Get the topics and meets the user is tutoring"
      description: "Returns a list of topics the user has proposed and meets for which they are a tutor."
      tags:
        - Users
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                type: object
                properties:
                  meets_confirmed:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        status:
                          type: string
                          enum: ["pending", "confirmed", "finished"]
                        date:
                          type: string
                          format: date-time
                        topic:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            name:
                              type: string
                  meets_pending:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        status:
                          type: string
                          enum: ["pending", "confirmed", "finished"]
                        date:
                          type: string
                          format: date-time
                        topic:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            name:
                              type: string
                  meets_finished:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        status:
                          type: string
                          enum: ["pending", "confirmed", "finished"]
                        date:
                          type: string
                          format: date-time
                        topic:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            name:
                              type: string
                  topics:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        name:
                          type: string
        401:
          description: "Unauthorized"

  /profile/learn:
    get:
      summary: "Get the topics and meets the user is learning"
      description: "Returns a list of topics the user is interested in as a student and the meets they are participating in."
      tags:
        - Users
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                type: object
                properties:
                  meets_confirmed:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        status:
                          type: string
                          enum: ["pending", "confirmed", "finished"]
                        date:
                          type: string
                          format: date-time
                        topic:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            name:
                              type: string
                  meets_pending:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        status:
                          type: string
                          enum: ["pending", "confirmed", "finished"]
                        date:
                          type: string
                          format: date-time
                        topic:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            name:
                              type: string
                  meets_finished:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        status:
                          type: string
                          enum: ["pending", "confirmed", "finished"]
                        date:
                          type: string
                          format: date-time
                        topic:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            name:
                              type: string
                  topics:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        name:
                          type: string
        401:
          description: "Unauthorized"

  /users/{id}/teach:
    get:
      summary: "Get the topics and meets a specific user is tutoring"
      description: "Returns a list of topics the specified user has proposed and meets for which they are a tutor."
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: "ID of the user"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                type: object
                properties:
                  meets_confirmed:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        status:
                          type: string
                          enum: ["pending", "confirmed", "finished"]
                        date:
                          type: string
                          format: date-time
                        topic:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            name:
                              type: string
                  meets_pending:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        status:
                          type: string
                          enum: ["pending", "confirmed", "finished"]
                        date:
                          type: string
                          format: date-time
                        topic:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            name:
                              type: string
                  meets_finished:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        status:
                          type: string
                          enum: ["pending", "confirmed", "finished"]
                        date:
                          type: string
                          format: date-time
                        topic:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            name:
                              type: string
                  topics:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        name:
                          type: string
        401:
          description: "Unauthorized"
        404:
          description: "User not found"

  /users/{id}/learn:
    get:
      summary: "Get the topics and meets a specific user is learning"
      description: "Returns a list of topics the specified user is interested in as a student and the meets they are participating in."
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: "ID of the user"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                type: object
                properties:
                  meets_confirmed:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        status:
                          type: string
                          enum: ["pending", "confirmed", "finished"]
                        date:
                          type: string
                          format: date-time
                        topic:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            name:
                              type: string
                  meets_pending:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        status:
                          type: string
                          enum: ["pending", "confirmed", "finished"]
                        date:
                          type: string
                          format: date-time
                        topic:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            name:
                              type: string
                  meets_finished:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        status:
                          type: string
                          enum: ["pending", "confirmed", "finished"]
                        date:
                          type: string
                          format: date-time
                        topic:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            name:
                              type: string
                  topics:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        name:
                          type: string
        401:
          description: "Unauthorized"
        404:
          description: "User not found"

  /profile/meets/{id}:
    get:
      deprecated: true
      summary: Get the tutor's meeting by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A meeting object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TutorMeet'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/AuthHeaderMissingError'
        '404':
          description: Meeting not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Meet not found
      tags:
      - Users
    patch:
      deprecated: true
      summary: Cancel a meeting
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the meeting to cancel
      responses:
        '200':
          description: Meeting cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Meet cancelled successfully"
        '422':
          description: Meet is already cancelled or completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Meet is already cancelled, cannot cancel"
        '404':
          description: Meet not found or user is not the tutor
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Meet not found or you are not the tutor"

  
  /meets/{id}/interest:
    post:
      deprecated: true
      summary: Express interest in a meet
      tags:
        - Meets
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the meet to express interest in
      responses:
        '200':
          description: Interest expressed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Interest expressed successfully"
                  debug:
                    type: array
                    items:
                      type: string
                      example: "User's interest added to availability tutor."
        '400':
          description: User already interested or bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User already interested in this meet"
                  debug:
                    type: array
                    items:
                      type: string
                      example: "User has existing interest in availability tutor."
        '404':
          description: Meet not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Meet not found"
    delete:
      deprecated: true
      summary: Remove interest in a meet
      tags:
        - Meets
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the meet to remove interest from
      responses:
        '200':
          description: Interest removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Interest removed successfully"
        '400':
          description: User is not interested in this meet
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User is not interested in this meet"
        '404':
          description: Meet not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Meet not found"



  /auth/google_oauth2/callback:
    get:
      summary: Callback for Google OAuth2
      responses:
        '200':
          description: Register/login the user and generate the JWT token 
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    format: JWT
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwMzQwZjQwZjQwZjQwZjQwZjQwZiIsImlhdCI6MTYxNjIwNjQwMn0.1
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error
      tags:
      - Authentication


  /topics/{topic_id}/tutor_availability:
    parameters:
      - in: path
        name: topic_id
        required: true
        schema:
          type: integer
        description: The ID of the topic
    post:
      deprecated: true
      tags:
        - Tutor availability
      responses:
        '200':
          description: Success
        '404':
          description: Topic not found


  /topics:
    get:
      summary: Get a list of topics filtered by user (tutor) and/or subject
      description: |
        Retrieve a list of topics, filtered by user (tutor) and/or subject. If no filters are provided, all topics are returned.
      parameters:
        - in: query
          name: user_id
          schema:
            type: string
            format: uuid
          required: false
          description: Filter availabilities by the user ID (tutor).
        - in: query
          name: subject_id
          schema:
            type: integer
          required: false
          description: Filter availabilities by the subject ID.
      responses:
        '200':
          description: A list of topics
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: The topic ID
                    name:
                      type: string
                      description: The name of the topic
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/AuthHeaderMissingError'
      tags:
      - Topics
    post:
      summary: Create a new topic
      description: |
        This endpoint allows a user to create a new topic. The request body must include the topic details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTopic'
      tags:
      - Topics
      responses:
        '201':
          description: Topic created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Topic created successfully"
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "param is missing or the value is empty"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/AuthHeaderMissingError'

  /topics/{topic_id}:
    get:
      summary: Get details of a specific topic by ID
      parameters:
        - in: path
          name: topic_id
          required: true
          schema:
            type: integer
          description: The ID of the topic
      responses:
        '200':
          description: Topic details (work in progress)
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "Tautologías y Contradicciones"
                  description:
                    type: string 
                    example: "En lógica, una tautología es una fórmula que es verdadera en cualquier interpretación,....."  
                  proposed:
                    type: boolean
                    example: true
                  meets: 
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 3
                        status:
                          type: string
                          example: "pending"
                        date:
                          type: string
                          format: date-time
                          example: "2024-10-22T15:20:02.093"    


        '404':
          description: Topic not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Topic not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/AuthHeaderMissingError'
      tags:
      - Topics
    delete:
      summary: Delete a topic
      parameters:
        - in: path
          name: topic_id
          required: true
          schema:
            type: integer
          description: The ID of the topic to delete
      responses:
        '200':
          description: Topic deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Topic deleted successfully"
        '404':
          description: Topic not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Topic not found"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not allowed"

    /topics/{topic_id}:
    patch:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 14
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                topic:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "Math Fundamentals"
                    description:
                      type: string
                      example: "Learn the basics of mathematics"
                    link:
                      type: string
                      format: uri
                      example: "https://example.com/topic/14"
                    show_email:
                      type: boolean
                      example: true
 

      tags:
      - Topics
      
  /meets:
    get:
      summary: Get a list of meetings
      description: Retrieve a list of meetings, filtered by various parameters.
      parameters:
        - name: topic_id
          in: query
          description: Filter by the topic ID
          required: false
          schema:
            type: integer
        - name: participant_id
          in: query
          description: Returns all meetings where the user is a participant
          required: false
          schema:
            type: string
            format: uuid
        - name: tutor_id
          in: query
          description: Filter by the tutor ID
          required: false
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          description: Filter by the meeting status
          required: false
          schema:
            type: string
            enum: [pending, confirmed, completed, cancelled]
      responses:
        '200':
          description: A list of meetings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Meet'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/AuthHeaderMissingError'
      tags: 
        - Meets

  /meets/{id}:
    get:
      summary: Get details of a specific meeting by ID
      description: Retrieve details for a specific meeting, including the topic, tutor, and participants.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the meeting
      responses:
        '200':
          description: Meeting details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "Mathematics Tutoring Session"
                  date:
                    type: string
                    format: date-time
                    example: "2024-10-31T14:30:00Z"
                  status:
                    type: string
                    example: "confirmed"
                  link:
                    type: string
                    example: "https://example.com/meet/12345"
                  participant:
                    type: boolean
                    example: true
                  topic:
                    type: object
                    properties:
                      name:
                        type: string
                        example: "Math Fundamentals"
                      proposed:
                        type: boolean
                        example: true
                  tutor:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: "c2eeb5e0-74ff-4a8a-9b76-33e5d6d8f708"
                      name:
                        type: string
                        example: "John Doe"
                      email:
                        type: string
                        nullable: true
                        example: "johndoe@example.com"
                  participants:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                          example: "a7f5e1d2-8e4a-4c95-9313-456d0b6e582c"
                        name:
                          type: string
                          example: "Jane Smith"
                        email:
                          type: string
                          nullable: true
                          example: "janesmith@example.com"
        '404':
          description: Meet not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Meet not found"
        '401': 
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/AuthHeaderMissingError'
      tags:
        - Meets

    patch:
      summary: Confirm a pending meet
      description: |
        This endpoint confirms a pending meeting if the current user is the tutor of the meeting. If a new date is provided, the meeting status will be updated to confirmed. If the meeting is already confirmed or completed, an error is returned.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the meet
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  format: date-time
                  description: Optional new date and time for the meeting. If provided, the meeting status will be changed to confirmed.
      responses:
        '200':
          description: Meet confirmed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Meet confirmed successfully"
        '401':
          description: User not allowed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not allowed"
        '400':
          description: Invalid request due to meeting status
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Meeting already confirmed or completed"
        '422':
          description: Unprocessable entity due to validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error updating the meet"
      tags:
        - Meets


  /meets/:id/interesteds:
    post:
      summary: Sign up for a meeting  
      description: |
        This endpoint allow a user to register in a confirmed or pending meet.
      responses:
        '200':
          description: User interested successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Interested successfully"
        '400':
          $ref: '#/components/responses/UnauthorizedError'
        '401':
          $ref: '#/components/responses/AuthHeaderMissingError'
        '404':
          description: Meet not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Meet not found"
      tags:
        - Interesteds
    delete:
      summary: Remove interest in a meet
      description: |
        This endpoint allow a user to remove interest in a confirmed or pending meet.
      responses:
        '200':
          description: Interest removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Interest removed successfully"
        '400':
          $ref: '#/components/responses/UnauthorizedError'
        '401':
          $ref: '#/components/responses/AuthHeaderMissingError'
        '404':
          description: Meet not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Meet not found"
      tags:
        - Interesteds
  /tutor_availability/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: The ID of the tutor availability
    post:
      deprecated: true
      tags:
        - Tutor availability
      responses:
        '200':
          description: Tutor availability created successfully
        '404':
          description: Tutor availability not found

      
  /available_meets:
    get:
      deprecated: true
      summary: Get all available meets
      tags:
        - Meetings
      responses:
        '200':
          description: List of available meets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Meet'
        '404':
          description: No available meets found
      
  /available_meets/{id}:
    get:
      deprecated: true
      summary: Get details of a specific meeting
      description: Retrieve details for a specific meeting, including interested users.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the meeting
      responses:
        '200':
          description: Meeting details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The unique ID of the meeting
                  meeting_date:
                    type: string
                    format: date-time
                    description: The date and time of the meeting
                  meet_status:
                    type: string
                    description: The status of the meeting
                  topic:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The unique ID of the topic
                        name:
                          type: string
                          description: The name of the topic
                        image_url:
                          type: string
                          description: The image of the topic
                        description:
                          type: string
                          description: The description of the topic
                  availability_tutor:
                    type: object
                    properties:
                      availability:
                        type: string
                        description: The described availability
                      description:
                        type: string
                        description: The availability's description
                  tutor:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: The unique ID of the tutor
                      name:
                        type: string
                        description: The name of the tutor
                      image_url:
                        type: string
                        description: Tutor's image url
                  subject:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: The unique ID of the subject
                      name:
                        type: string
                        description: The name of the subject
                  interested:
                    type: boolean
                    description: Whether the current user is interested in the meeting
                  count_interesteds:
                    type: integer
                    description: The number of users interested in the meeting
                  interested_users:
                    type: array
                    description: List of users interested in the meeting
                    items:
                      $ref: '#/components/schemas/InterestedUser'
        '404':
          description: Meet not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Meet not found"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Bad request"
      tags:
        - Meetings
  /universities/:id/careers:
    get:
      summary: Get all careers from a university
      description: Retrieve a list of careers from a specific university.
      responses:
        '200':
          description: A list of careers
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: The career ID
                    name:
                      type: string
                      description: The name of the career
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/AuthHeaderMissingError'
      tags:
      - Careers

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT  # Indicates that this is a JWT token

  schemas:

    AvailabilityTutor:
      type: object
      properties:
        id:
          type: integer
        description:
          type: string
        link:
          type: string

    CreateTopic:
      type: object
      properties:
        topic:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
            link:
              type: string
              format: uri
            show_email:
              type: boolean
            subject_id:
              type: integer

    Meet:
      type: object
      properties:
        id:
          type: integer
        date_time:
          type: string
          format: date-time
        description:
          type: string
        link:
          type: string
        status:
          type: string
          enum:
            - pending
            - confirmed
            - completed
            - cancelled
        count_interesteds:
          type: integer
    
    InterestedUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        uid:
          type: string
        description:
          type: string
        image_url:
          type: string
          format: uri

    TutorMeet:
      type: object
      properties:
        id:
          type: integer
          example: 3
        date:
          type: string
          format: date-time
          example: "2024-10-22T15:20:02.093+01:00"
        status:
          type: string
          example: "pending"
        description:
          type: string
          example: "Sesión sobre Tautologías y Contradicciones"
        interesteds:
          type: integer
          example: 1
        topic:
          type: object
          properties:
            id:
              type: integer
              example: 8
            name:
              type: string
              example: "Tautologías y Contradicciones"
            image_url:
              type: string
              nullable: true
              example: null
        subject:
          type: object
          properties:
            id:
              type: integer
              example: 446
            name:
              type: string
              example: "Lógica"
        tutor:
          type: object
          properties:
            name:
              type: string
              example: "John Doe"
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        description:
          type: string
        image_url:
          type: string
          format: uri
        career:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string

  responses:
    UnauthorizedError:
      description: Unauthorized error by invalid token
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Invalid token

    AuthHeaderMissingError:
      description: Bad request error by missing Authorization header
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Authorization header is missing
                